{"name": "test_validate_adding_new_address_with_valid_credential", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <testCases.test_address.TestAddress object at 0x7f605db02770>\n\n    def test_validate_adding_new_address_with_valid_credential(self):\n        addressPage = AddressPage(self.driver)\n>       addressPage.validate_adding_new_address_with_valid_credential()\n\ntestCases/test_address.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.address_page.AddressPage object at 0x7f605dada6e0>\n\n    def validate_adding_new_address_with_valid_credential(self):\n        self.driver.find_element(*self.NAV_GLOBAL_LOCATION_POPOVER_LINK).click()\n        time.sleep(5)\n        self.driver.find_element(*self.ADD_ADDRESS_OR_PICK_UP_POINT).click()\n        time.sleep(2)\n        self.driver.find_element(*self.ADDRESS_TILE).click()\n        time.sleep(5)\n        fake = Faker('en_IN')\n        list = [845305, 110001, 530068, 600001, 211001, 400001, 147301, 826124]\n        first_digit = fake.random_element(elements=('1', '2', '3', '4', '5', '6', '7', '8', '9'))\n        remaining_digits = fake.random_number(digits=9)\n        phone_number = f\"{first_digit}{remaining_digits}\"\n        self.driver.find_element(*self.FULL_NAME_INPUT).send_keys(fake.name())\n        self.driver.find_element(*self.PHONE_NUMBER_INPUT).send_keys(phone_number)\n        self.driver.find_element(*self.POSTAL_CODE_INPUT).send_keys(random.choice(list))\n    \n        self.driver.find_element(*self.ADDRESS_LINE_INPUT).send_keys(fake.address())\n    \n        self.driver.find_element(*self.SUBMIT_BUTTON).click()\n        time.sleep(20)\n        text=None\n        try:\n            review = self.driver.find_element(*self.REVIEW_ADDRESS_TITLE)\n            if review.is_displayed():\n                self.driver.find_element(*self.SUBMIT_BUTTON).click()\n                text = self.driver.find_element(By.XPATH, \"//h4[normalize-space()='Address saved']\").text.lower()\n    \n        except NoSuchElementException:\n            allure.attach(self.driver.get_screenshot_as_png(), name='failed_test', attachment_type=AttachmentType.PNG)\n            print(\"exception\")\n    \n>       assert text == \"address saved\"\nE       AssertionError\n\npages/address_page.py:101: AssertionError"}, "attachments": [{"name": "failed_test", "source": "71cd9054-d964-40e5-bf9d-b70124d41250-attachment.png", "type": "image/png"}, {"name": "stdout", "source": "ac765734-42eb-4324-943d-0a9912af036e-attachment.txt", "type": "text/plain"}], "start": 1707975922771, "stop": 1707975959583, "uuid": "be306fc0-0008-4b6b-942d-e91a494694ed", "historyId": "9b1d3c23ed881e528c2278a39ada5c78", "testCaseId": "9b1d3c23ed881e528c2278a39ada5c78", "fullName": "testCases.test_address.TestAddress#test_validate_adding_new_address_with_valid_credential", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setup', 'log_on_failure')"}, {"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_address"}, {"name": "subSuite", "value": "TestAddress"}, {"name": "host", "value": "shashi-Aspire-A715-41G"}, {"name": "thread", "value": "109651-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_address"}]}