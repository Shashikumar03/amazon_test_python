{"name": "test_search_setup", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=121.0.6167.160)\nStacktrace:\n#0 0x55c942f7cd93 <unknown>\n#1 0x55c942c60337 <unknown>\n#2 0x55c942c36a18 <unknown>\n#3 0x55c942cd6ead <unknown>\n#4 0x55c942ceca95 <unknown>\n#5 0x55c942cce1e3 <unknown>\n#6 0x55c942c9e135 <unknown>\n#7 0x55c942c9f13e <unknown>\n#8 0x55c942f40e4b <unknown>\n#9 0x55c942f44dfa <unknown>\n#10 0x55c942f2d6d5 <unknown>\n#11 0x55c942f45a6f <unknown>\n#12 0x55c942f1169f <unknown>\n#13 0x55c942f6a098 <unknown>\n#14 0x55c942f6a262 <unknown>\n#15 0x55c942f7bf34 <unknown>\n#16 0x7f8669c94ac3 <unknown>", "trace": "self = <testCases.test_search.TestSearch object at 0x7fc813442c80>\n\n    def test_search_setup(self):\n        amazonHomePage = AmazonHomePage(self.driver)\n>       amazonHomePage.amazon_current_url(Message.title)\n\ntestCases/test_search.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages/amazon_home_page.py:34: in amazon_current_url\n    self.driver.get(\"https://www.amazon.in/\")\n.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:356: in get\n    self.execute(Command.GET, {\"url\": url})\n.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fc812f3a620>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...\\\\n#14 0x55c942f6a262 \\\\u003Cunknown>\\\\n#15 0x55c942f7bf34 \\\\u003Cunknown>\\\\n#16 0x7f8669c94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=121.0.6167.160)\nE       Stacktrace:\nE       #0 0x55c942f7cd93 <unknown>\nE       #1 0x55c942c60337 <unknown>\nE       #2 0x55c942c36a18 <unknown>\nE       #3 0x55c942cd6ead <unknown>\nE       #4 0x55c942ceca95 <unknown>\nE       #5 0x55c942cce1e3 <unknown>\nE       #6 0x55c942c9e135 <unknown>\nE       #7 0x55c942c9f13e <unknown>\nE       #8 0x55c942f40e4b <unknown>\nE       #9 0x55c942f44dfa <unknown>\nE       #10 0x55c942f2d6d5 <unknown>\nE       #11 0x55c942f45a6f <unknown>\nE       #12 0x55c942f1169f <unknown>\nE       #13 0x55c942f6a098 <unknown>\nE       #14 0x55c942f6a262 <unknown>\nE       #15 0x55c942f7bf34 <unknown>\nE       #16 0x7f8669c94ac3 <unknown>\n\n.venv/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchWindowException"}, "attachments": [{"name": "log", "source": "f2dceb23-0fa1-49f0-8e20-58958eeb7f6a-attachment.txt", "type": "text/plain"}], "start": 1707975130838, "stop": 1707975130842, "uuid": "34d28be2-09bb-49fc-a81d-b0d922293343", "historyId": "57c48e5e9be8e8073e264b1b3e017185", "testCaseId": "57c48e5e9be8e8073e264b1b3e017185", "fullName": "testCases.test_search.TestSearch#test_search_setup", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setup', 'log_on_failure')"}, {"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_search"}, {"name": "subSuite", "value": "TestSearch"}, {"name": "host", "value": "shashi-Aspire-A715-41G"}, {"name": "thread", "value": "108653-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_search"}]}